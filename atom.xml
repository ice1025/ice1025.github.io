<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>我是标题</title>
  <subtitle>工作并不是生活的全部，多陪陪家人，多爱爱她。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://ice1025.github.io/"/>
  <updated>2017-10-12T03:23:55.929Z</updated>
  <id>http://ice1025.github.io/</id>
  
  <author>
    <name>ice</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>springMVC常用注解之@Controller @RequestMapping</title>
    <link href="http://ice1025.github.io/2017/10/12/springMVC-3/"/>
    <id>http://ice1025.github.io/2017/10/12/springMVC-3/</id>
    <published>2017-10-12T03:04:00.864Z</published>
    <updated>2017-10-12T03:23:55.929Z</updated>
    
    <content type="html"><![CDATA[<p><strong><h4 id="@Controller">@Controller</h4></strong><br><code>@controller</code>负责注册一个bean 到spring 上下文中，注解表明一个类是作为控制器的角色存在，spring不要求你去继承任何控制器基类，也不要求你去实现Servlet的那套api。<br>@controller注解表明这个类所承担的角色，分派器（DispatcherServlet）会扫描所有注解了@Controller的类，检测其中通过@RequestMapping注解配置的方法。<br>当然，你也可以不使用@Controller注解而显式地去定义被注解的bean，这点通过标准的Spring bean的定义方式，在dispather的上下文属性下配置即可做到。<br>但是@Controller原型是可以被框架自动检测的，Spring支持classpath路径下组件类的自动检测，以及对已定义bean的自动注册。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></div><div class="line">   <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></div><div class="line">   <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong><h4 id="@RequestMapping">@RequestMapping</h4></strong><br>RequestMapping是一个用来处理请求地址映射的注解，可用于类或方法上。用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径。<br>RequestMapping注解有六个属性，下面我们把它分成三类进行说明。</p>
<ul>
<li><p>value， method<br>value：     指定请求的实际地址，指定的地址可以是URI Template 模式（后面将会说明）<br>method：  指定请求的method类型， GET、POST、PUT、DELETE等</p>
</li>
<li><p>consumes，produces<br>consumes： 指定处理请求的提交内容类型（Content-Type），例如application/json, text/html<br>produces:    指定返回的内容类型，仅当request请求头中的(Accept)类型中包含该指定类型才返回</p>
</li>
<li><p>params，headers<br>params： 指定request中必须包含某些参数值时，才让该方法处理。<br>headers： 指定request中必须包含某些指定的header值，才能让该方法处理请求。</p>
</li>
</ul>
<p>示例：</p>
<p></p><h5 id="1、value  / method 示例">1、value  / method 示例</h5><br>默认RequestMapping(“….str…”)即为value的值；<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/appointments"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppointmentsController</span> </span>&#123;  </div><div class="line">  </div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AppointmentBook appointmentBook;  </div><div class="line">      </div><div class="line">    <span class="meta">@Autowired</span>  </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AppointmentsController</span><span class="params">(AppointmentBook appointmentBook)</span> </span>&#123;  </div><div class="line">        <span class="keyword">this</span>.appointmentBook = appointmentBook;  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.GET)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Appointment&gt; <span class="title">get</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> appointmentBook.getAppointmentsForToday();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/&#123;day&#125;"</span>, method = RequestMethod.GET)  </div><div class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Appointment&gt; <span class="title">getForDay</span><span class="params">(@PathVariable @DateTimeFormat(iso=ISO.DATE)</span> Date day, Model model) </span>&#123;  </div><div class="line">        <span class="keyword">return</span> appointmentBook.getAppointmentsForDay(day);  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(value=<span class="string">"/new"</span>, method = RequestMethod.GET)  </div><div class="line">    <span class="function"><span class="keyword">public</span> AppointmentForm <span class="title">getNewForm</span><span class="params">()</span> </span>&#123;  </div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AppointmentForm();  </div><div class="line">    &#125;  </div><div class="line">  </div><div class="line">    <span class="meta">@RequestMapping</span>(method = RequestMethod.POST)  </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">(@Valid AppointmentForm appointment, BindingResult result)</span> </span>&#123;  </div><div class="line">        <span class="keyword">if</span> (result.hasErrors()) &#123;  </div><div class="line">            <span class="keyword">return</span> <span class="string">"appointments/new"</span>;  </div><div class="line">        &#125;  </div><div class="line">        appointmentBook.addAppointment(appointment);  </div><div class="line">        <span class="keyword">return</span> <span class="string">"redirect:/appointments"</span>;  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>value的uri值为以下三类：<br>A） 可以指定为普通的具体值；<br>B)  可以指定为含有某变量的一类值；<br>C) 可以指定为含正则表达式的一类值；</p>
</blockquote>
<p>example B)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findOwner</span><span class="params">(@PathVariable String ownerId,Model model)</span></span>&#123;</div><div class="line">	Owner owner = ownerService.findOwner(ownerId);    </div><div class="line">    model.addAttribute(<span class="string">"owner"</span>, owner);    </div><div class="line">    <span class="keyword">return</span> <span class="string">"displayOwner"</span>;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>example C)<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/spring-web/&#123;symbolicName:[a-z-]+&#125;-&#123;version:\d\.\d\.\d&#125;.&#123;extension:\.[a-z]&#125;"</span>)  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(@PathVariable String version, @PathVariable String extension)</span> </span>&#123;      </div><div class="line">    <span class="comment">// ...  </span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p></p><h5 id="2、 consumes、produces 示例">2、 consumes、produces 示例</h5><br>cousumes的样例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/pets"</span>, method = RequestMethod.POST, consumes=<span class="string">"application/json"</span>)  </div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPet</span><span class="params">(@RequestBody Pet pet, Model model)</span> </span>&#123;      </div><div class="line">    <span class="comment">// implementation omitted  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>方法仅处理request Content-Type为“application/json”类型的请求。</p>
<p>produces的样例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/pets/&#123;petId&#125;"</span>, method = RequestMethod.GET, produces=<span class="string">"application/json"</span>)  </div><div class="line"><span class="meta">@ResponseBody</span>  </div><div class="line"><span class="function"><span class="keyword">public</span> Pet <span class="title">getPet</span><span class="params">(@PathVariable String petId, Model model)</span> </span>&#123;      </div><div class="line">    <span class="comment">// implementation omitted  </span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>方法仅处理request请求中Accept头中包含了”application/json”的请求，同时暗示了返回的内容类型为application/json;</p>
<p></p><h5 id="3、 params、headers 示例">3、 params、headers 示例</h5><br>params的样例：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativePathUriTemplateController</span> </span>&#123;  </div><div class="line">  </div><div class="line">  <span class="meta">@RequestMapping</span>(value = <span class="string">"/pets/&#123;petId&#125;"</span>, method = RequestMethod.GET, params=<span class="string">"myParam=myValue"</span>)  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String ownerId, @PathVariable String petId, Model model)</span> </span>&#123;      </div><div class="line">    <span class="comment">// implementation omitted  </span></div><div class="line">  &#125;  </div><div class="line">&#125; </div><div class="line">``` </div><div class="line"> 仅处理请求中包含了名为“myParam”，值为“myValue”的请求；</div><div class="line"></div><div class="line">headers的样例：</div><div class="line">```java</div><div class="line"><span class="meta">@Controller</span>  </div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/owners/&#123;ownerId&#125;"</span>)  </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RelativePathUriTemplateController</span> </span>&#123;  </div><div class="line">  </div><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/pets"</span>, method = RequestMethod.GET, headers=<span class="string">"Referer=http://www.imice.me/"</span>)  </div><div class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPet</span><span class="params">(@PathVariable String ownerId, @PathVariable String petId, Model model)</span> </span>&#123;      </div><div class="line">    <span class="comment">// implementation omitted  </span></div><div class="line">  &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>仅处理request的header中包含了指定“Refer”请求头和对应值为<a href="http://www.imice.me/" target="_blank" rel="external">http://www.imice.me/</a>的请求；</p>
<p>上面仅仅介绍了，RequestMapping指定的方法处理哪些请求，下面一篇将讲解怎样处理request提交的数据（数据绑定）和返回的数据。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;h4 id=&quot;@Controller&quot;&gt;@Controller&lt;/h4&gt;&lt;/strong&gt;&lt;br&gt;&lt;code&gt;@controller&lt;/code&gt;负责注册一个bean 到spring 上下文中，注解表明一个类是作为控制器的角色存在，spring不要求你去继
    
    </summary>
    
    
      <category term="springMVC" scheme="http://ice1025.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>CentOS安装配置jdk</title>
    <link href="http://ice1025.github.io/2017/09/04/CentOS_jdk1.7/"/>
    <id>http://ice1025.github.io/2017/09/04/CentOS_jdk1.7/</id>
    <published>2017-09-04T06:52:18.131Z</published>
    <updated>2017-09-04T06:49:53.525Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>CentOS：6.9 x64<br>jdk：1.7</p>
</blockquote>
<p><strong>查看是否安装有jdk，并删除之前版本</strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">#查看</div><div class="line">rpm -qa|grep java</div><div class="line">#删除</div><div class="line">rpm -e --nodeps java-XXXX</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><strong>从官网下载好1.7的安装包，解压到指定目录/usr/local/java</strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">tar zxvf jdk-<span class="number">7</span>u79-linux-x64.tar.gz -C /usr/local/java/</div><div class="line">#当前目录结构为 /usr/local/java/jdk1.<span class="number">7</span>.<span class="number">0</span>_79</div></pre></td></tr></table></figure></p>
<p><strong>配置环境变量，编辑/etc/prodile文件</strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">vim /etc/profile</div><div class="line">#在末尾添加</div><div class="line">export JAVA_HOME=/usr/local/java/jdk1.<span class="number">7</span>.<span class="number">0</span>_79</div><div class="line">export CLASSPATH=.:$JAVA_HOME/jre/lib/rt.jar:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar </div><div class="line">export <span class="built_in">PATH</span>=$<span class="built_in">PATH</span>:$JAVA_HOME/bin</div></pre></td></tr></table></figure></p>
<p><strong>重新加载/etc/profile</strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">souce /etc/profile</div></pre></td></tr></table></figure></p>
<p><strong>查看</strong><br><figure class="highlight dos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">java -version</div><div class="line">#显示如下</div><div class="line">java version "<span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_79"</div><div class="line">Java(TM) SE Runtime Environment (build <span class="number">1</span>.<span class="number">7</span>.<span class="number">0</span>_79-b15)</div><div class="line">Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">24</span>.<span class="number">79</span>-b02, mixed <span class="built_in">mode</span>)</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CentOS：6.9 x64&lt;br&gt;jdk：1.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;查看是否安装有jdk，并删除之前版本&lt;/strong&gt;&lt;br&gt;&lt;figure class=&quot;highlight dos&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;#查看&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rpm -qa|grep java&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;#删除&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;rpm -e --nodeps java-XXXX&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="linux" scheme="http://ice1025.github.io/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>springMVC学习记录（二）基于代码的servlet容器初始化</title>
    <link href="http://ice1025.github.io/2017/08/01/springMVC-2/"/>
    <id>http://ice1025.github.io/2017/08/01/springMVC-2/</id>
    <published>2017-08-01T03:27:09.900Z</published>
    <updated>2017-10-12T02:11:08.969Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>IDE:：idea16<br>构建工具：maven<br>jdk版本：1.7</p>
</blockquote>
<p><strong>springMVC简介</strong></p>
<p>springMVC是围绕一个<code>DispatcherServlet</code>来设计的，这个servlet会把请求分发给各个处理器，并支持可配置的处理器映射、视图渲染、本地化、时区与主题渲染等，支持文件上传。处理器是你的应用中注解了<code>@Controller</code>和<code>@RequestMapping</code>的类和方法，spring为处理器方法提供了多样灵活的配置。spring3.0以后提供了<code>@Controller</code>注解机制，<code>@PathVariable</code>注解以及一些其他的特性，你可以使用它们来进行<code>RESTful</code> web站点和应用的开发。</p>
<blockquote>
<p><code>对扩展开发</code>是spring web MVC框架的一个重要的设计原则，对整个spring框架来说，设计原则就是传说中的 <code>对扩展开放，对修改关闭</code>。（OCP：Open-Closed Principle）<br>到底是啥意思呢，就是在设计一个软件系统模块（类，方法）的时候，应该可以在不修改原有的模块（修改关闭）的基础上，能扩展其功能（扩展开放）。</p>
<ul>
<li>扩展开放：某模块的功能是可扩展的，则该模块是扩展开放的，软件系统的功能上的<code>可扩展性</code>要求模块是扩展开放的。</li>
<li>修改关闭：某模块被其他模块调用，如果该模块的源代码不允许修改，则该模块修改关闭的。软件系统的功能上的<code>稳定性</code>，持续性要求是修改关闭的。</li>
</ul>
</blockquote>
<p><strong>DispatcherServlet</strong><br>spring MVC框架与其他很多web的MVC框架一样，请求驱动，所有设计都围绕着一个中央Servlet来展开，它负责把所有请求分发到控制器，同时提供其他Web应用开发所需要的功能。不过spring的中央处理器<code>DispatcherServlet</code>能做的比这更多。它与spring IOC容器做到了无缝集成，这意味着Spring提供的任何特性，在spring MVC中你都可以使用。</p>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/08/01/figure-21-1-the-request-processing-workflow-in-spring-web-mv.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>这张图展示了Spring Web MVC的<code>DispatcherServlet</code>处理请求的工作流。熟悉设计模式的朋友会发现，DispatcherServlet应用的其实就是一个<code>前端控制器</code>的设计模式（其他很多优秀的web框架也都使用了这个设计模式）。</p>
</blockquote>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--配置springMVC,这里的servlet名称决定着SpringMVC配置文件的名称--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--启动时加载,1代表优先级,越小代表越高--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--这里修改为全部页面--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上一篇环境配置中我们使用的是 在web.xml 文件中配置<code>DispatcherServlet</code>的方法，标准的java-EE Servlet配置，所有请求都会被名字为spring-mvc的<code>DispatcherServlet</code>处理。<br>接下来我们使用基于代码配置的方法，需要在servlet 3.0环境下，我们引入<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 导入java ee jar 包 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaee-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>MyWebApplicationInitializer.java<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebApplicationInitializer</span> <span class="keyword">implements</span> <span class="title">WebApplicationInitializer</span></span>&#123;</div><div class="line"></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onStartup</span><span class="params">(javax.servlet.ServletContext servletContext)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line"></div><div class="line">        XmlWebApplicationContext appConttext = <span class="keyword">new</span> XmlWebApplicationContext();</div><div class="line">        appConttext.setConfigLocation(<span class="string">"classpath:spring-mvc.xml"</span>);</div><div class="line"></div><div class="line">        ServletRegistration.Dynamic registration = servletContext.addServlet(<span class="string">"spring-mvc"</span>,<span class="keyword">new</span> DispatcherServlet(appConttext));</div><div class="line">        registration.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">        registration.addMapping(<span class="string">"/"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这个例子和上面的<code>web.xml</code>配置文件是等效的<br><code>WebApplicationInitializer</code>是spring MVC提供的一个接口，它会查找你所有基于代码的配置，并应用它们来初始化Servlet 3.0版本以上的web容器，它有一个抽象的实现<code>AbstractDispatcherServletInitializer</code>,用以简化<code>DispatcherServlet</code>的注册工作，你只需要指定其servlet映射(mapping)即可。</p>
<p><strong>DispatcherServlet的处理流程</strong></p>
<p>配置好<code>DispatcherServlet</code>以后，开始有请求会经过这个DispatcherServlet，此时DispatcherServlet会按照以下次序对请求进行处理</p>
<blockquote>
<ul>
<li>首先搜索应用的上下文对象，WebApplicationContext并把它作为一个属性（attribute）绑定到该请求上，以便控制器和其他组件能够使用它。属性的键名默认为<code>DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE</code></li>
<li>将地区（locale）解析器绑定到请求上，以便其他组件在处理请求（渲染视图、准备数据等）时可以获取区域相关的信息。如果你的应用不需要解析区域相关的信息，忽略它即可</li>
<li>将主题（theme）解析器绑定到请求上，以便其他组件（比如视图等）能够了解要渲染哪个主题文件。同样，如果你不需要使用主题相关的特性，忽略它即可</li>
<li>如果你配置了multipart文件处理器，那么框架将查找该文件是不是multipart（分为多个部分连续上传）的。若是，则将该请求包装成一个<code>MultipartHttpServletRequest</code>对象，以便处理链中的其他组件对它做进一步的处理。</li>
<li>为该请求查找一个合适的处理器。如果可以找到对应的处理器，则与该处理器关联的整条执行链（前处理器，后处理器，控制器等）都会被执行，以完成相应模型的准备或视图的渲染</li>
<li>如果处理器返回的是一个模型（model），那么框架将渲染相应的视图。若没有返回任何模型（可能是因为前后的处理器出于某种原因拦截了请求等，比如安全问题），则框架不会渲染任何视图，此时认为对请求的处理可能已经由处理链完成了</li>
</ul>
</blockquote>
<p>如果在处理请求的过程中抛出了异常，那么上下文<code>WebApplicationContext</code>对象中所定义的异常处理器将会负责捕获这些异常。通过配置你自己的异常处理器，你可以定制自己处理异常的方式。</p>
<p>你可以定制DispatcherServlet的配置，具体的做法，是在web.xml文件中，Servlet的声明元素上添加一些Servlet的初始化参数（通过init-param元素）。该元素可选的参数列表</p>
<blockquote>
<ul>
<li><code>contextClass</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;任意实现了WebApplicationContext接口的类。这个类会初始化该servlet所需要用到的上下文对象。默认情况下，框架会使用一个XmlWebApplicationContext对象。</li>
<li><code>contextConfigLocation</code>   &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;一个指定了上下文配置文件路径的字符串，该值会被传入给contextClass所指定的上下文实例对象。该字符串内可以包含多个字符串，字符串之间以逗号分隔，以此支持你进行多个上下文的配置。在多个上下文中重复定义的bean，以最后加载的bean定义为准</li>
<li><code>namespace</code>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;WebApplicationContext的命名空间。默认是[servlet-name]-servlet</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;IDE:：idea16&lt;br&gt;构建工具：maven&lt;br&gt;jdk版本：1.7&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;springMVC简介&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;springMVC是围绕一个&lt;code&gt;Dispatch
    
    </summary>
    
    
      <category term="springMVC" scheme="http://ice1025.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>springMVC学习记录（一）环境搭建</title>
    <link href="http://ice1025.github.io/2017/07/31/springMVC-1/"/>
    <id>http://ice1025.github.io/2017/07/31/springMVC-1/</id>
    <published>2017-07-31T09:29:42.862Z</published>
    <updated>2017-10-12T02:21:58.172Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以前没有写博客记录的习惯，发现好多东西写过之后特别容易忘，<br>最近有点时间，重新回顾一下，恩…从springMVC开始</p>
<p>IDE:：idea16<br>构建工具：maven<br>jdk版本：1.7</p>
</blockquote>
<p><strong><h5 id="使用idea创建maven项目">使用idea创建maven项目</h5></strong></p>
<blockquote>
<p>创建过程比较简单，放几张图<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731143752.md.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>next<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731144024.md.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>继续next<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731144154.md.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>这里maven home可以选择 idea默认提供的，也可以指定自己的maven目录<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731144509.md.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>finish项目构建完成<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731144732.md.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>默认生成的目录结构，以及pom文件，可以看到这里给我们默认引入了junit包<br>配置一下我们的tomcat，点击edit<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731145024.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>我们创建添加一个tomcat<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731145302.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>简单配置一下<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731145533.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731145541.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>启动项目<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731145745.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>传图片好累。。终于看到了传说中的hello world，接下来就是配置springMVC<br><strong><h5 id="配置springMVC">配置springMVC</h5></strong></p>
</blockquote>
<h6 id="引入spring的相关jar包，jstl标签">引入spring的相关jar包，jstl标签</h6>

<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- spring核心包 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-oxm<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aop<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context-support<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"></div><div class="line"><span class="comment">&lt;!-- JSTL标签类 --&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p><strong><h6 id="配置xml文件">配置xml文件</h6></strong></p>
<blockquote>
<p>(1)spring配置文件 applicationContext.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd"&gt;</div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>(2)springMVC配置文件 spring-mvc.xml<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:mvc</span>=<span class="string">"http://www.springframework.org/schema/mvc"</span></div><div class="line">       <span class="attr">xmlns:task</span>=<span class="string">"http://www.springframework.org/schema/task"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">                        http://www.springframework.org/schema/beans/spring-beans-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/context</div><div class="line">                        http://www.springframework.org/schema/context/spring-context-3.1.xsd</div><div class="line">                        http://www.springframework.org/schema/mvc</div><div class="line">                        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd"&gt;</div><div class="line">    <span class="comment">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"controller"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 配置注解驱动 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--静态资源映射--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">mvc:default-servlet-handler</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!--设置字符编码--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.ByteArrayHttpMessageConverter"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringHttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringHttpMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/plain;charset=UTF-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- 定义跳转的文件的前后缀 ，视图模式配置--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!--可以使用jstl标签--&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"viewClass"</span> <span class="attr">value</span>=<span class="string">"org.springframework.web.servlet.view.JstlView"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/WEB-INF/jsp/"</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>(3) web.xml文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></div><div class="line">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_3_1.xsd"</span></div><div class="line">         <span class="attr">version</span>=<span class="string">"3.1"</span>&gt;</div><div class="line">  <span class="comment">&lt;!--指定spring的配置文件所在的目录--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:applicationContext.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--设置spring监听器--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">  <span class="comment">&lt;!--配置springMVC,这里的servlet名称决定着SpringMVC配置文件的名称--&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--启动时加载,1代表优先级,越小代表越高--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>spring-mvc<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--这里修改为全部页面--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span> <span class="comment">&lt;!--设置你想用的字符集，我这里用的是UTF-8--&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!--强制使用该编码--&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">      <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line"></div><div class="line">  <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span> <span class="comment">&lt;!--设置你想过滤的页面或者是Servlet，根据自己的需要配置--&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure></p>
</blockquote>
<p>主要是配置一下视图解析，静态资源映射，编码这么些东西<br>看下我们现在的目录结构<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731172014.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
<h5 id="编写测试代码">编写测试代码</h5>

<p>我们在controller下新建一个HelloController，跳转到 jsp 下的hello.jsp<br>HelloController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMethod;</div><div class="line"></div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(value = <span class="string">"/hello"</span>,method = RequestMethod.GET)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>hello.jsp<br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;%@ page contentType="text/html;charset=UTF-8" language="java" %&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;Title&lt;/title&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    this is hello.jsp</div><div class="line">&lt;img src="../../static/images/05.jpg"&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p>
<p>引入了一张图片测试下静态资源引入是否正常，访问tomcat<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/07/31/QQ20170731172414.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>到这里springMVC的简单配置就完成了，下一篇继续深入探讨</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;以前没有写博客记录的习惯，发现好多东西写过之后特别容易忘，&lt;br&gt;最近有点时间，重新回顾一下，恩…从springMVC开始&lt;/p&gt;
&lt;p&gt;IDE:：idea16&lt;br&gt;构建工具：maven&lt;br&gt;jdk版本：1.7&lt;/p&gt;
&lt;/blockquote
    
    </summary>
    
    
      <category term="springMVC" scheme="http://ice1025.github.io/tags/springMVC/"/>
    
  </entry>
  
  <entry>
    <title>elasticSearch  Query DSL(Filters)</title>
    <link href="http://ice1025.github.io/2017/05/05/elasticsearch_queryDSL/"/>
    <id>http://ice1025.github.io/2017/05/05/elasticsearch_queryDSL/</id>
    <published>2017-05-05T08:53:53.303Z</published>
    <updated>2017-10-12T02:15:24.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>在一篇中我们实现了mysql数据实时同步至elasticSearch，<br>接下来就是利用<code>java API</code>来实现数据查询，使用<code>Filters</code>方式查询<br>注释写的很清楚，包含分页，关键字查询，范围查询等等</p>
</blockquote>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/testList/&#123;page&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Test&gt; <span class="title">list</span><span class="params">(HttpServletRequest request,@PathVariable(<span class="string">"page"</span>)</span> Integer pageNo) <span class="keyword">throws</span> ParseException </span>&#123;</div><div class="line">        <span class="keyword">int</span> pageSize = <span class="number">5</span>;</div><div class="line">        TransportClient client = EsUtil.getTransportClient();</div><div class="line">        SearchRequestBuilder srb = client.prepareSearch().setIndices(<span class="string">"test"</span>).setTypes(<span class="string">"testInfo"</span>);</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 有两种查询方式，query查询和filter查询</div><div class="line">         * 两者的区别：</div><div class="line">         *          query查询会计算一个分值，es中索引的数据都会存储一个_score分值，分值越高就代表越匹配</div><div class="line">         *          filter查询不会去计算任何分值，也不关心返回的排序问题，因此效率会高一点。</div><div class="line">         *          经常使用过滤器，ES会自动的缓存过滤器的内容，这对于查询来说，会提高很多性能。</div><div class="line">         */</div><div class="line">        BoolFilterBuilder boolFilter = FilterBuilders.boolFilter();</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 通配符查询 查询name中带有 "小" 的</div><div class="line">         * * 匹配任意字符串  ? 匹配任意一个字符</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.queryFilter(QueryBuilders.wildcardQuery(<span class="string">"name"</span>,<span class="string">"*小*"</span>)));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * name 查询没有字段或没有值或值为null的数据</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.missingFilter(<span class="string">"name"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 查询 name 不为null的数据</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.existsFilter(<span class="string">"name"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * idsFilter 查询 testInfo 中 id 为1 和 2 的，</div><div class="line">         * "testInfo"为可变参数</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.idsFilter(<span class="string">"testInfo"</span>).addIds(<span class="string">"1"</span>,<span class="string">"2"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 查询age等于22 或者 33</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.inFilter(<span class="string">"age"</span>,<span class="string">"20"</span>,<span class="string">"33"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 查询name 等于 "小明" 的</div><div class="line">         */</div><div class="line">        boolFilter.must(FilterBuilders.termFilter(<span class="string">"name"</span>,<span class="string">"小明"</span>));</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 查询 createDate 在某个区间内</div><div class="line">         */</div><div class="line">        String date1 = <span class="string">"2017-05-04 10:20:00"</span>;</div><div class="line">        String date2 = <span class="string">"2017-05-04 10:30:00"</span>;</div><div class="line">        Date startDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).parse(date1);</div><div class="line">        Date endDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).parse(date2);</div><div class="line">        boolFilter.must(FilterBuilders.rangeFilter(<span class="string">"createDate"</span>).from(startDate.getTime()));</div><div class="line">        boolFilter.must(FilterBuilders.rangeFilter(<span class="string">"createDate"</span>).to(endDate.getTime()));</div><div class="line"></div><div class="line">        SearchResponse searchResponse = srb.setPostFilter(boolFilter)</div><div class="line">                <span class="comment">//pageNo</span></div><div class="line">                .setFrom(pageNo&gt;<span class="number">0</span>?((pageNo-<span class="number">1</span>)*pageSize):<span class="number">0</span>)</div><div class="line">                <span class="comment">//pageSize</span></div><div class="line">                .setSize(pageSize)</div><div class="line">                <span class="comment">//按 id 倒序</span></div><div class="line">                .addSort(<span class="string">"id"</span>, SortOrder.DESC)</div><div class="line">                .execute().actionGet();</div><div class="line">        SearchHits hits = searchResponse.getHits();</div><div class="line">        <span class="comment">//总记录数</span></div><div class="line">        <span class="keyword">long</span> total = hits.getTotalHits();</div><div class="line">        System.out.println(<span class="string">"总记录数："</span> + total);</div><div class="line"></div><div class="line">        SearchHit[] searchHits = hits.hits();</div><div class="line">        List&lt;Test&gt; list = <span class="keyword">new</span> ArrayList&lt;Test&gt;();</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; searchHits.length; i++) &#123;</div><div class="line">            Map&lt;String,Object&gt; map= searchHits[i].getSource();</div><div class="line">            Test t = <span class="keyword">this</span>.recoreEntity(map);</div><div class="line">            list.add(t);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> list;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="comment">/**</span></div><div class="line">     * 查询结果映射为对应的实体</div><div class="line">     */</div><div class="line">    <span class="function"><span class="keyword">public</span> Test <span class="title">recoreEntity</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</div><div class="line">        Calendar calendar = Calendar.getInstance();</div><div class="line">        Test test = <span class="keyword">new</span> Test();</div><div class="line">        <span class="keyword">for</span> (String key : map.keySet()) &#123;</div><div class="line">            <span class="keyword">if</span>(<span class="string">"id"</span>.equals(key))&#123;</div><div class="line">                test.setId(Long.valueOf(map.get(key).toString()));</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"name"</span>.equals(key))&#123;</div><div class="line">                <span class="keyword">if</span>(map.get(key) == <span class="keyword">null</span>)&#123;</div><div class="line">                    test.setName(<span class="keyword">null</span>);</div><div class="line">                &#125;<span class="keyword">else</span>&#123;</div><div class="line">                    test.setName(map.get(key).toString());</div><div class="line">                &#125;</div><div class="line"></div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"age"</span>.equals(key))&#123;</div><div class="line">                test.setAge(Integer.parseInt((map.get(key).toString())));</div><div class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"createDate"</span>.equals(key))&#123;</div><div class="line">                <span class="keyword">if</span>(map.get(key) == <span class="keyword">null</span>)&#123;</div><div class="line">                    test.setCreateDate(<span class="keyword">null</span>);</div><div class="line">                &#125;<span class="keyword">else</span> &#123;</div><div class="line">                    calendar.setTimeInMillis(Long.parseLong(map.get(key).toString()));</div><div class="line">                    test.setCreateDate(calendar.getTime());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">return</span> test;</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p><strong>TEST</strong></p>
<blockquote>
<p>查询createDate在 <code>&quot;2017-05-04 10:20:00&quot;</code> 和<code>&quot;2017-05-04 10:30:00&quot;</code>之间的数据<br>pageNo 为1 pageSize 默认5<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">         * 查询 createDate 在某个区间内</div><div class="line">         */</div><div class="line">        String date1 = <span class="string">"2017-05-04 10:20:00"</span>;</div><div class="line">        String date2 = <span class="string">"2017-05-04 10:30:00"</span>;</div><div class="line">        Date startDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).parse(date1);</div><div class="line">        Date endDate = <span class="keyword">new</span> SimpleDateFormat(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>).parse(date2);</div><div class="line">        boolFilter.must(FilterBuilders.rangeFilter(<span class="string">"createDate"</span>).from(startDate.getTime()));</div><div class="line">        boolFilter.must(FilterBuilders.rangeFilter(<span class="string">"createDate"</span>).to(endDate.getTime()));</div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/92385187-file_1493974226877_1421e.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;在一篇中我们实现了mysql数据实时同步至elasticSearch，&lt;br&gt;接下来就是利用&lt;code&gt;java API&lt;/code&gt;来实现数据查询，使用&lt;code&gt;Filters&lt;/code&gt;方式查询&lt;br&gt;注释写的很清楚，包含分页，关键字查询，
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://ice1025.github.io/tags/elasticsearch/"/>
    
  </entry>
  
  <entry>
    <title>利用mysql触发器创建变更表推送数据到elasticsearch</title>
    <link href="http://ice1025.github.io/2017/05/04/mysql_elsticsearch/"/>
    <id>http://ice1025.github.io/2017/05/04/mysql_elsticsearch/</id>
    <published>2017-05-04T03:23:26.174Z</published>
    <updated>2017-10-12T02:15:06.382Z</updated>
    
    <content type="html"><![CDATA[<p><strong>利用mysql触发器创建变更表推送数据到elasticsearch</strong></p>
<blockquote>
<p>需求：某项业务需要用到模糊查询，数据库用的mysql，<code>%search%</code>类似这样的索引无法生效，导致搜索特别吃力<br>看到了这位老铁的<code>利用mysql触发器创建变更表推送数据到elasticsearch</code><br>原文链接：<a href="http://www.toozy.cn/mysql-trigger-elasticsearch/" target="_blank" rel="external">http://www.toozy.cn/mysql-trigger-elasticsearch/</a><br> 按照这个思路，决定采用elasticsearch来替代mysql提供搜索服务。</p>
<p>搜索了挺多mysql和elasticsearch之间数据同步的方式，<br>这是常见的几款插件，大神总结了这几款插件的优缺点<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/20160627215020397.png" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>any way,这几款插件对我帮助不大，我只需要这一块儿业务即可，有想研究的可以查看原文<br><a href="http://blog.csdn.net/laoyang360/article/details/51771621" target="_blank" rel="external">http://blog.csdn.net/laoyang360/article/details/51771621</a><br>于是便有了如下的解决方案：<br> 将要搜索的数据填充到elasticsearch里面并保持更新，原文列出了几种解决方案</p>
<ul>
<li>在应用层面当出现增删改时顺便或提交到队列来更新索引。</li>
<li>解析mysql的binlog，来更新索引。</li>
<li>利用mysql的触发器来将变更信息写入一个表或外部队列来更新索引。</li>
</ul>
<p>（1）出于不增加业务复杂度的考虑，放弃了在应用处理的方案。<br>（2）第二种binblog方式，原文说是出于运维部署，以及对于binlog方式如何处理单表的顾虑，放弃了binlog方案，这货不是今天的主题先略过，回头再研究…<br>（3）最后采取的是利用mysql触发器来将变更插入一张表，通过计划任务处理变更表里的数据<br>变更表方案<br>给要操作的表增加增删改的触发器，将变更表id写入一张change表，服务器实时读取变更表数据，同步更新elsearch对应索引。</p>
</blockquote>
<p><strong><h1 id="创建增删改的触发器">创建增删改的触发器</h1></strong></p>
<blockquote>
<p>一张测试表test用来模拟我们要操作的表，<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/afc47af5169c886b.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>一张用来保存test表记录变更的test_change表，<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/60d95a0902792d22.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>change_type用来保存test表触发的类型，(增删改)<br>change_id用来保存更新字段的id<br>laster_id 持久化一个最后更新的id标识<br>接下来创建三个简单的触发器<br><figure class="highlight monkey"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#增加</span></div><div class="line">CREATE TRIGGER test_trigger_insert AFTER INSERT ON test </div><div class="line"><span class="keyword">FOR</span> EACH ROW INSERT INTO test_change VALUES(<span class="literal">NULL</span>,now(),<span class="comment">'INSERT',NEW.id,null);</span><span class="meta"></span></div><div class="line">#修改</div><div class="line">CREATE TRIGGER test_trigger_update AFTER UPDATE ON test</div><div class="line"><span class="keyword">FOR</span> EACH ROW INSERT INTO test_change VALUES(<span class="literal">NULL</span>,now(),<span class="comment">'UPDATE',NEW.id,null);</span><span class="meta"></span></div><div class="line">#删除</div><div class="line">CREATE TRIGGER test_trigger_delete AFTER DELETE ON test</div><div class="line"><span class="keyword">FOR</span> EACH ROW INSERT INTO test_change VALUES(<span class="literal">NULL</span>,now(),<span class="comment">'DELETE',OLD.id,null);</span></div></pre></td></tr></table></figure></p>
</blockquote>
<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/99f3c56848f04129.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
<blockquote>
<p>触发器正常的工作，记录下了变更表的操作记录</p>
</blockquote>
<p><strong><h1 id="elasticsearch安装">elasticsearch安装</h1></strong></p>
<blockquote>
<p>当时装的过程中遇到不少坑…</p>
<ul>
<li>elasticsearch下载。下载完成后是一个压缩包，在需要安装的目录解压</li>
<li>配置环境变量path，指向elsearch目录下的bin</li>
<li>jdk安装。。。</li>
<li>增加环境变量ES_HEAP_SIZE，值为：256m（或者512m）。这是分配最大和最小的存储容量。</li>
<li>找到bin文件夹下的<code>elasticsearch.bat</code>，双击运行。在bin的同级目录就会生成data和logs文件夹。<br>执行后可以看到类似如下界面：<figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/ee437359401c3124.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure>
验证是否安装成功，在浏览器地址栏上输入：<a href="http://localhost:9200" target="_blank" rel="external">http://localhost:9200</a><br>显示一串json数据，显示你的elsearch的信息<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"status"</span> : <span class="number">200</span>,</div><div class="line">  <span class="attr">"name"</span> : <span class="string">"Arabian Knight"</span>,</div><div class="line">  <span class="attr">"cluster_name"</span> : <span class="string">"elasticsearch"</span>,</div><div class="line">  <span class="attr">"version"</span> : &#123;</div><div class="line">    <span class="attr">"number"</span> : <span class="string">"1.4.4"</span>,</div><div class="line">    <span class="attr">"build_hash"</span> : <span class="string">"c88f77ffc81301dfa9dfd81ca2232f09588bd512"</span>,</div><div class="line">    <span class="attr">"build_timestamp"</span> : <span class="string">"2015-02-19T13:05:36Z"</span>,</div><div class="line">    <span class="attr">"build_snapshot"</span> : <span class="literal">false</span>,</div><div class="line">    <span class="attr">"lucene_version"</span> : <span class="string">"4.10.3"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"tagline"</span> : <span class="string">"You Know, for Search"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</blockquote>
<p><strong><h2 id="elasticsearch插件安装">elasticsearch插件安装</h2></strong></p>
<blockquote>
<p>我只装了一个可视化的head插件，有其他需求可以自行安装插件<br>安装命令：<code>D:\elasticsearch\bin&gt;plugin -install mobz/elasticsearch-head</code><br>安装完成后在<code>D:\elasticsearch\plugins</code>目录下会有<code>head</code>的文件夹<br>打开head_site\index.html(或者在浏览器地址栏输入<a href="http://localhost:9200/_plugin/head/" target="_blank" rel="external">http://localhost:9200/_plugin/head/</a>),<br>会显示如下界面：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/80e2c5b6cd9084d5.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
</blockquote>
<p><strong><h1 id="服务器实时读取变更数据，并写入elasticsearch">服务器实时读取变更数据，并写入elasticsearch</h1></strong></p>
<p></p><h2 id="获取elsearch实例">获取elsearch实例</h2><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.elasticsearch<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </div><div class="line">       <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </div><div class="line">   <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bing.utils;</div><div class="line"></div><div class="line"><span class="keyword">import</span> org.elasticsearch.client.transport.TransportClient;</div><div class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.ImmutableSettings;</div><div class="line"><span class="keyword">import</span> org.elasticsearch.common.settings.Settings;</div><div class="line"><span class="keyword">import</span> org.elasticsearch.common.transport.InetSocketTransportAddress;</div><div class="line"></div><div class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</div><div class="line"><span class="keyword">import</span> java.util.HashMap;</div><div class="line"><span class="keyword">import</span> java.util.Map;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ice on 2016/11/7.</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EsUtil</span> </span>&#123;</div><div class="line">    <span class="keyword">static</span> Map&lt;String, String&gt; m = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</div><div class="line">    <span class="comment">// 设置client.transport.sniff为true来使客户端去嗅探整个集群的状态，把集群中其它机器的ip地址加到客户端中，</span></div><div class="line">    <span class="keyword">static</span> Settings settings = ImmutableSettings.settingsBuilder().put(m)</div><div class="line"><span class="comment">//            .put("cluster.name","elasticsearch")</span></div><div class="line"><span class="comment">//            .put("client.transport.sniff", true)</span></div><div class="line">            .put(<span class="string">"index.refresh_interval"</span>,<span class="string">"1s"</span>)<span class="comment">//索引自动刷新间隔时间</span></div><div class="line">            .build();</div><div class="line"></div><div class="line">    <span class="comment">// 创建私有对象</span></div><div class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TransportClient client;</div><div class="line"></div><div class="line">    <span class="keyword">static</span> &#123;</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            Class&lt;?&gt; clazz = Class.forName(TransportClient.class.getName());</div><div class="line">            Constructor&lt;?&gt; constructor = clazz.getDeclaredConstructor(Settings.class);</div><div class="line">            constructor.setAccessible(<span class="keyword">true</span>);</div><div class="line">            client = (TransportClient) constructor.newInstance(settings);</div><div class="line">            client.addTransportAddress(<span class="keyword">new</span> InetSocketTransportAddress(<span class="string">"127.0.0.1"</span>, <span class="number">9300</span>));</div><div class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="comment">//取得实例</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  TransportClient <span class="title">getTransportClient</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> client;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p></p><h2 id="数据初始化">原有数据初始化</h2><p></p>
<blockquote>
<p>导入当前的数据至elsearch中，作为初始数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">     * 初始化数据</div><div class="line">     */</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="comment">/**</span></div><div class="line">         * 设置字段类型</div><div class="line">         * 为什么需要设置字段类型？</div><div class="line">         * elasticSearch对字符串有两种完全不同的搜索方式，</div><div class="line">         *  （1）按照整个文本进行匹配，即我们平时用的关键词搜索(keyword search)</div><div class="line">         *  （2）按单个字符匹配，即全文搜索(full-text search)</div><div class="line">         *   对ElasticSearch稍有了解的人都知道, 前者的字符串被称为 not-analyzed 字符, 而后者被称作 analyzed 字符串.</div><div class="line">         *   我的需求只是简单的关键词搜索，用不到分词啥的所以要设置字段类型为String</div><div class="line">         *      注：在新的elaeticsearch5.0中，String类型已被移除，增加了两个类型</div><div class="line">         *          keyword 类型对应关键词搜索 ， text 类型对应全文搜索</div><div class="line">         */</div><div class="line">        <span class="comment">//创建索引</span></div><div class="line">        EsUtil.getTransportClient().admin().indices().prepareCreate(<span class="string">"test"</span>).execute();</div><div class="line">        <span class="keyword">try</span> &#123;</div><div class="line">            XContentBuilder builder = XContentFactory.jsonBuilder().startObject().startObject(<span class="string">"properties"</span>)</div><div class="line">                    .startObject(<span class="string">"id"</span>).field(<span class="string">"type"</span>,<span class="string">"long"</span>).endObject()</div><div class="line">                    .startObject(<span class="string">"name"</span>).field(<span class="string">"type"</span>,<span class="string">"string"</span>).field(<span class="string">"index"</span>,<span class="string">"not_analyzed"</span>).endObject()</div><div class="line">                    .startObject(<span class="string">"createDate"</span>).field(<span class="string">"type"</span>,<span class="string">"string"</span>).field(<span class="string">"index"</span>,<span class="string">"not_analyzed"</span>).endObject()</div><div class="line">                    .startObject(<span class="string">"age"</span>).field(<span class="string">"type"</span>,<span class="string">"long"</span>).endObject()</div><div class="line">                    .endObject().endObject();</div><div class="line">            PutMappingRequest putMappingRequest = Requests.putMappingRequest(<span class="string">"test"</span>).type(<span class="string">"testInfo"</span>).source(builder);</div><div class="line">            EsUtil.getTransportClient().admin().indices().putMapping(putMappingRequest).actionGet();</div><div class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="comment">//初始化索引数据</span></div><div class="line">        List&lt;Test&gt; testList = testRepository.findAll();</div><div class="line">        <span class="keyword">for</span> (Test test : testList) &#123;</div><div class="line">            <span class="keyword">this</span>.add(String.valueOf(test.getId()));</div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<p>数据初始化之后打开我们的head视图<a href="http://localhost:9200/_plugin/head/可以看到我们的索引创建成功，浏览一下数据" target="_blank" rel="external">http://localhost:9200/_plugin/head/可以看到我们的索引创建成功，浏览一下数据</a><br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/85dc129ec4bdf0e7.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure></p>
</blockquote>
<h3 id="向elsearch中插入数据">向elsearch中插入数据</h3><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 新增索引数据</div><div class="line">    * <span class="doctag">@param</span> testId</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String testId)</span> </span>&#123;</div><div class="line">       Test test = testRepository.findOne(Long.valueOf(testId));</div><div class="line">       Map&lt;String,Object&gt; source = <span class="keyword">new</span> HashMap&lt;String,Object&gt;();</div><div class="line">       source.put(<span class="string">"id"</span>,test.getId());</div><div class="line">       source.put(<span class="string">"name"</span>,test.getName());</div><div class="line">       source.put(<span class="string">"createDate"</span>,test.getCreateDate().getTime());</div><div class="line">       source.put(<span class="string">"age"</span>,test.getAge());</div><div class="line">       EsUtil.getTransportClient().prepareIndex(<span class="string">"test"</span>,<span class="string">"testInfo"</span>,testId)</div><div class="line">               .setSource(source).execute().actionGet();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br>&gt;保存日期数据时，我保存的是毫秒数，方便后续利用elsearch的javaAPI根据日期进行查询<br>&gt;（因为es默认存储时间的格式是UTC时间，如果我们查询es然后获取时间日期默认的数据，会发现跟当前的时间差8个小时，格式也是形如这样的<code>1970-01-01T00:00:00Z</code>，当然也可以直接设置format为你想要的格式，比如<code>yyyy-MM-dd HH:mm:ss</code> 然后存储的时候，指定格式，并且 Mapping  也是指定相同的format）<br><br><h3 id="从elsearch中删除数据">从elsearch中删除数据</h3><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line">    * 删除索引数据</div><div class="line">    * <span class="doctag">@param</span> testId</div><div class="line">    */</div><div class="line">   <span class="meta">@Override</span></div><div class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">del</span><span class="params">(String testId)</span> </span>&#123;</div><div class="line">        EsUtil.getTransportClient().prepareDelete(<span class="string">"test"</span>,<span class="string">"testInfo"</span>, testId).execute().actionGet();</div><div class="line">   &#125;</div></pre></td></tr></table></figure><br><br><h3 id="轮询数据库">轮询数据库</h3>

<blockquote>
<p>相当于实时监听数据库，关于这个有很多方案，我这里的搜索功能对即时要求不太高，就用简单的轮询，时间间隔设置不要太短就行，以免服务器压力过大<br>比如说我用spring的<code>@Scheduled</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> com.bing.controller;</div><div class="line"></div><div class="line"><span class="keyword">import</span> com.bing.domain.student.TestChange;</div><div class="line"><span class="keyword">import</span> com.bing.repository.TestChangeRepository;</div><div class="line"><span class="keyword">import</span> com.bing.repository.TestRepository;</div><div class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</div><div class="line"><span class="keyword">import</span> org.springframework.scheduling.annotation.Scheduled;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * Created by ice on 2017/4/28.</div><div class="line"> */</div><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/test"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestChangeController</span> </span>&#123;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    TestChangeRepository testChangeRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    TestRepository testRepository;</div><div class="line"></div><div class="line">    <span class="meta">@Scheduled</span>(cron = <span class="string">"0/2 * * * * ?"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">task</span><span class="params">()</span></span>&#123;</div><div class="line">        Integer n =<span class="number">0</span>;</div><div class="line">        TestChange tc = <span class="keyword">null</span>;</div><div class="line">        <span class="keyword">if</span>(testChangeRepository.findAll().size() &gt; <span class="number">0</span>)&#123;</div><div class="line">           tc = testChangeRepository.findAll().get(<span class="number">0</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="comment">//最后更新id标识</span></div><div class="line">        Integer count = testChangeRepository.getCountAsSql();</div><div class="line">        <span class="keyword">if</span>(tc != <span class="keyword">null</span>)&#123;</div><div class="line">            n = tc.getLasterId();</div><div class="line">        &#125;</div><div class="line">        count = count==<span class="keyword">null</span>?<span class="number">0</span>:count;</div><div class="line">        n = n==<span class="keyword">null</span>?<span class="number">0</span>:n;</div><div class="line">        <span class="keyword">if</span>(count &gt; n )&#123;</div><div class="line">            <span class="comment">//循环的次数count-n</span></div><div class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = (n+<span class="number">1</span>);i&lt;=count; i++) &#123;</div><div class="line">                TestChange testChange = testChangeRepository.findOne(Long.valueOf(i));</div><div class="line">                Long changeId = Long.valueOf(testChange.getChangeId());</div><div class="line">                String chanType = testChange.getChangeType();</div><div class="line">                <span class="keyword">if</span>(<span class="string">"DELETE"</span>.equals(chanType))&#123;</div><div class="line">                    <span class="comment">//根据id从elasticsearch中删除对应数据</span></div><div class="line">                    testChangeRepository.del(String.valueOf(changeId));</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"INSERT"</span>.equals(chanType))&#123;</div><div class="line">                    <span class="comment">//向elsearch中添加数据</span></div><div class="line">                    testChangeRepository.add(String.valueOf(changeId));</div><div class="line">                &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="string">"UPDATE"</span>.equals(chanType))&#123;</div><div class="line">                    <span class="comment">//因为我们不知道要更改的属性，</span></div><div class="line">                    <span class="comment">// 数据更新的时候只有把elsearch中原本对应的数据删除，再添加新的数据</span></div><div class="line">                    testChangeRepository.del(String.valueOf(changeId));</div><div class="line">                    testChangeRepository.add(String.valueOf(changeId));</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        n = count;</div><div class="line">        <span class="keyword">if</span>(tc != <span class="keyword">null</span>)&#123;</div><div class="line">            tc.setLasterId(n);</div><div class="line">            testChangeRepository.save(tc);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/init"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</div><div class="line">        testChangeRepository.init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
</blockquote>
<h1 id="测试">测试</h1>

<blockquote>
<p>基本配置已经完成，可以手动更改数据库中的数据来测试是否会同步到elasticsearch<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/b67606047f499ecc.gif" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>接下来就是调用elsearch的javaapi来做数据查询，恩就放到下一篇吧。。。</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;利用mysql触发器创建变更表推送数据到elasticsearch&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求：某项业务需要用到模糊查询，数据库用的mysql，&lt;code&gt;%search%&lt;/code&gt;类似这样的索引无法生效，导致搜索特别
    
    </summary>
    
    
      <category term="elasticsearch" scheme="http://ice1025.github.io/tags/elasticsearch/"/>
    
      <category term="mysql" scheme="http://ice1025.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>手机端页面下滑异步加载数据</title>
    <link href="http://ice1025.github.io/2017/04/27/slideLoading/"/>
    <id>http://ice1025.github.io/2017/04/27/slideLoading/</id>
    <published>2017-04-27T02:27:32.310Z</published>
    <updated>2017-05-08T07:15:08.317Z</updated>
    
    <content type="html"><![CDATA[<p><strong>手机端页面下滑异步加载数据</strong></p>
<blockquote>
<p>需求：手机端滑动异步加载产品数据</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//当前pageNo</span></div><div class="line"><span class="keyword">var</span> pageNo = <span class="built_in">parseInt</span>(<span class="string">'$&#123;pageNo&#125;'</span>);</div><div class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	query(<span class="string">'first'</span>);<span class="comment">//首次加载</span></div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="comment">//设置加载状态</span></div><div class="line"><span class="keyword">var</span> loading = <span class="literal">false</span>;</div><div class="line">Zepto(<span class="function"><span class="keyword">function</span>(<span class="params">$</span>)</span>&#123;</div><div class="line">	$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">		<span class="comment">//默认滑动到底部开始</span></div><div class="line">         <span class="keyword">if</span>(($(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height() &gt; $(<span class="built_in">document</span>).height()<span class="number">-10</span>)</div><div class="line">                 &amp;&amp; loading )&#123;</div><div class="line">             loading=<span class="literal">false</span>;</div><div class="line">             pageNo++;</div><div class="line">             query(<span class="string">"then"</span>);</div><div class="line">         &#125;</div><div class="line">     &#125;);</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">query</span>(<span class="params">type</span>)</span>&#123;</div><div class="line">	<span class="keyword">var</span> url = <span class="string">"$&#123;ctx&#125;/product/getJson.action?pageNo="</span>+pageNo;</div><div class="line">	$loading.show();<span class="comment">//显示加载中效果</span></div><div class="line">	$.ajax(&#123;</div><div class="line">		<span class="attr">url</span>:url,</div><div class="line">		<span class="attr">success</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">			loading = <span class="literal">true</span>;<span class="comment">//标识</span></div><div class="line">			<span class="keyword">if</span>(data == <span class="literal">null</span>)&#123;</div><div class="line">				pageNo--;</div><div class="line">				$.loading.hide();</div><div class="line">				$(<span class="string">'.nomore-products'</span>).show();<span class="comment">//数据加载完成，无更多</span></div><div class="line">				loading = <span class="literal">false</span>;</div><div class="line">			&#125;<span class="keyword">else</span>&#123;</div><div class="line">				<span class="keyword">if</span>(type == <span class="string">'then'</span>)&#123;<span class="comment">//滑动加载</span></div><div class="line">					<span class="keyword">if</span>(data.length == <span class="number">0</span>)&#123;</div><div class="line">						pageNo--;</div><div class="line">						$loading.hide();</div><div class="line">						$(<span class="string">'.nomore-products'</span>).show();</div><div class="line">						loading = <span class="literal">false</span>;</div><div class="line">						<span class="keyword">return</span> <span class="string">""</span>;</div><div class="line">					&#125;</div><div class="line">				&#125;</div><div class="line">				$.each(data,<span class="function"><span class="keyword">function</span>(<span class="params">i,item</span>)</span>&#123;</div><div class="line">					<span class="comment">//获取json数据拼接html</span></div><div class="line">					$productList.append( </div><div class="line">					<span class="string">'&lt;figcaption&gt;'</span></div><div class="line">					+<span class="string">'&lt;span&gt;'</span> + item.productTitle + <span class="string">'&lt;/span&gt;'</span></div><div class="line">					+<span class="string">'&lt;span&gt;'</span> + item.productId+ <span class="string">'&lt;/span&gt;'</span></div><div class="line">					+<span class="string">'&lt;/figcaption&gt;'</span></div><div class="line">					);</div><div class="line">					$loading.hide();	</div><div class="line">				&#125;);</div><div class="line">				</div><div class="line">			&#125;		</div><div class="line">		&#125;,</div><div class="line">		<span class="attr">error</span>:<span class="function"><span class="keyword">function</span>(<span class="params">XMLHttpRequest,textStatus,errorThrown</span>)</span>&#123;</div><div class="line">			loading=<span class="literal">true</span>;</div><div class="line">            pageNo--;</div><div class="line">            alert(<span class="string">"数据加载出错"</span>+textStatus);</div><div class="line">		&#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<blockquote>
<p>如果首次加载不想用异步方式，可以在<code>pageNo</code>声明之后直接<code>++</code>，直接加载第二页，<br>首次可以用从后台直接返回的list数据，异步加载时再返回<code>json</code>即可</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;手机端页面下滑异步加载数据&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求：手机端滑动异步加载产品数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
    
    </summary>
    
    
      <category term="滑动异步加载" scheme="http://ice1025.github.io/tags/%E6%BB%91%E5%8A%A8%E5%BC%82%E6%AD%A5%E5%8A%A0%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式匹配url</title>
    <link href="http://ice1025.github.io/2017/04/13/zhengze/"/>
    <id>http://ice1025.github.io/2017/04/13/zhengze/</id>
    <published>2017-04-13T10:16:31.934Z</published>
    <updated>2017-10-12T02:10:12.471Z</updated>
    
    <content type="html"><![CDATA[<p><strong>正则表达式匹配url</strong></p>
<blockquote>
<p>需求：在客户端识别一段文字中的url并加上链接效果</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">replaceReg</span>(<span class="params">reg,str</span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> str.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">m</span>)</span>&#123;<span class="keyword">return</span> <span class="string">'&lt;a href="http://'</span>+m+<span class="string">'" target="_blank"&gt;'</span>+m+<span class="string">'&lt;/a&gt;'</span>;&#125;)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">var</span> reg = <span class="regexp">/[\w\-]+(\.[\w\-]+)+([\w\-\.,@?^=%&amp;:\/~\+#]*[\w\-\@?^=%&amp;\/~\+#])?/ig</span>;</div><div class="line">    <span class="keyword">var</span> str =<span class="string">'普通ice1025.github.io前缀http://ice1025.github.io带参数https://ice1025.github.io/2017/04/05/categories_%20java/复杂参数https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;tn=baidu&amp;wd=test&amp;oq=ice1025.github.io&amp;rsv_pq=aff940260000ac5b&amp;rsv_t=7296ebK9LCPPnnupMO6dFV7jFM9hTjiVM24P3ETj4%2BH%2F3W%2BPlK0wix6RqS4&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=12&amp;rsv_sug1=12&amp;rsv_sug7=100&amp;rsv_sug2=0&amp;inputT=4695&amp;rsv_sug4=4695'</span>;</div><div class="line">    <span class="built_in">document</span>.write(replaceReg(reg,str));</div><div class="line"><span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
<blockquote>
<p>可以看到这里正则开头并没有限制以<code>https | http | ftp</code>开头，而是在输出时添加<code>http://</code><br>原因： 通过正则中 <code>| + space</code>确实可以匹配到类似<code>www.xx.com</code>这种网址但是我发现点击跳转的时候 target 失效，形成 <code>localhost/www.xx.com</code> 这种网址</p>
</blockquote>
<p>页面效果如图：<br><figure class="image-bubble">
                <div class="img-lightbox">
                    <div class="overlay"></div>
                    <img src="https://tuchuang001.com/images/2017/05/09/84f18f528a2d2c11.jpg" alt="" title="">
                </div>
                <div class="image-caption"></div>
            </figure><br>头部选择不匹配，如有需要可以在头部加上<code>((ht|f)tps?):\/\/</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;正则表达式匹配url&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;需求：在客户端识别一段文字中的url并加上链接效果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;
    
    </summary>
    
    
      <category term="正则表达式" scheme="http://ice1025.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
</feed>
